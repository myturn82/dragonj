Supabase OAuth 전체 플로우 점검 및 개선 방법

1. Supabase 프로젝트 설정 점검
- Supabase 콘솔 → Authentication → URL Configuration
- Site URL:
  - 로컬 개발: http://localhost:3000
  - Vercel 배포: https://your-vercel-app.vercel.app
- Redirect URLs:
  - http://localhost:3000/auth/callback
  - https://your-vercel-app.vercel.app/auth/callback
- 위 두 곳 모두 등록되어 있어야 합니다.

2. 환경 변수 점검
- .env.local 또는 Vercel 환경변수에 아래 두 값이 정확히 입력되어야 합니다.
  NEXT_PUBLIC_SUPABASE_URL=...
  NEXT_PUBLIC_SUPABASE_ANON_KEY=...
- 값이 잘못되면 인증이 정상 동작하지 않습니다.

3. 로그인 버튼 구현 점검
- 로그인 버튼은 반드시 Supabase의 signInWithOAuth를 사용해야 하며,
  redirectTo 옵션이 /auth/callback으로 정확히 지정되어야 합니다.

예시:
const handleGitHubLogin = async () => {
  const { error } = await supabase.auth.signInWithOAuth({
    provider: 'github',
    options: {
      redirectTo: `${window.location.origin}/auth/callback`,
      skipBrowserRedirect: false,
    },
  });
  if (error) setMessage('GitHub 로그인 실패: ' + error.message);
};

4. /auth/callback 페이지 점검
- useSearchParams().get('code')로 code를 받고,
- 반드시 code가 있을 때만 exchangeCodeForSession을 호출해야 함
- code가 없으면 즉시 /login으로 리다이렉트

예시:
useEffect(() => {
  const code = searchParams.get('code');
  if (!code) {
    setErrorMsg('인증 코드가 없습니다. 다시 시도해주세요.');
    router.replace('/login');
    return;
  }
  const handleAuth = async () => {
    const { error } = await supabase.auth.exchangeCodeForSession(code);
    if (!error) {
      alert('로그인에 성공했습니다! 메인 페이지로 이동합니다.');
      router.replace('/');
    } else {
      await supabase.auth.signOut();
      alert('로그인 실패: ' + error.message + '\n로그인 페이지로 이동합니다.');
      router.replace('/login');
    }
  };
  handleAuth();
}, [searchParams, supabase, router]);

5. 브라우저 세션/스토리지 주의
- Supabase는 OAuth 플로우 중 code_verifier를 브라우저의 sessionStorage에 저장합니다.
- 사용자가 인증 중간에 새로고침/시크릿모드/다른 브라우저를 사용하면 인증이 실패합니다.
- 안내 메시지를 추가해 주세요:
  "로그인 중 새로고침하거나 시크릿 모드에서는 인증이 실패할 수 있습니다."

6. 네비게이션(로그인/로그아웃) 버튼 점검
- 로그인 상태는 Supabase의 getSession()으로 판별
- 로그인 버튼은 /login으로 이동, 로그아웃 버튼은 supabase.auth.signOut() 후 /login으로 이동

7. 전체 플로우 예시
1) 로그인 버튼 클릭
   → signInWithOAuth → GitHub 인증 → /auth/callback?code=...으로 리디렉션
2) /auth/callback
   → code가 있으면 exchangeCodeForSession(code)
   → 성공: 메인 페이지로 이동
   → 실패: 에러 메시지 + /login으로 이동
3) 로그인 상태
   → 네비게이션에 로그아웃 버튼만 노출
4) 로그아웃 버튼 클릭
   → supabase.auth.signOut() → /login으로 이동

8. 문제 발생 시 체크리스트
- Supabase 콘솔의 리디렉션 URL이 정확한가?
- 환경변수가 올바른가?
- 로그인 버튼이 signInWithOAuth로 구현되어 있는가?
- /auth/callback에서 code가 없을 때 즉시 리턴하는가?
- 인증 중 새로고침/시크릿모드 사용하지 않았는가?

9. 추가 개선(권장)
- /auth/callback에서 code_verifier가 없을 때도 안내 메시지 추가
- 인증 실패 시, 사용자에게 "다시 로그인 해주세요" 안내

만약 위 모든 점검 후에도 문제가 있다면:
- 실제 배포 URL, Supabase 설정 스크린샷, 인증 플로우에서 어떤 단계에서 멈추는지 구체적으로 알려주시면 더 정확히 도와드릴 수 있습니다!

위 단계대로 점검/수정하면 Supabase OAuth 인증 플로우가 정상 동작합니다.
추가로 궁금한 점이나, 특정 단계에서 막히는 부분이 있으면 말씀해 주세요! 